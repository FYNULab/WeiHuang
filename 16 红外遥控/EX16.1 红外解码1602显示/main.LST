C51 COMPILER V7.06   MAIN                                                                  10/12/2014 15:50:55 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

stmt level    source

   1          /***************************************************************************************************    
   2          工程名称：      IFR_1602
   3          功能描述：  按下遥控器上的任意按键，实现红外遥控器解码，1602液晶显示解码结果。
   4          硬件连接：  用1位杜邦线将J9_2与J5_IFR连接,将1602液晶接口对应插接到P4接口。
   5          维护记录：  2011-8-22
   6          ***************************************************************************************************/
   7          #include "reg51.h"          //包含头文件
   8          #include "1602.h"
   9          #define uchar unsigned char
  10          #define uint  unsigned int
  11          
  12          extern uchar Read_AD(uchar chn);
  13          
  14          
  15          sbit IFR_in=P3^2;                     //红外触发外部中断管脚
  16          
  17          char code Tab[]="0123456789+-<>||CHEQ"; //1602液晶显示0-F的编码
  18          uchar dis2[16];                       //解码结果
  19          uchar  IRQ_num;                       //定时中断进入次数,用判断高低电平的计时
  20          uchar  T_num[33];
  21          bit IRF_ok;                           //解码1次完成标志位
  22          bit irpro_ok,IRF_ok;
  23          unsigned char decode[4];
  24          #define K0  ( decode[2]==0x16 ) // 0
  25          #define K1  ( decode[2]==0x0c ) // 1
  26          #define K2  ( decode[2]==0x18 ) //2
  27          #define K3  ( decode[2]==0x5e ) // 3
  28          #define K4  ( decode[2]==0x08 ) // 4
  29          #define K5  ( decode[2]==0x1c ) // 5
  30          #define K6  ( decode[2]==0x5a ) // 6
  31          #define K7  ( decode[2]==0x42 ) // 7
  32          #define K8  ( decode[2]==0x52 ) // 8
  33          #define K9  ( decode[2]==0x4a ) // 9
  34          #define K10 ( decode[2]==0x19 ) // 100+
  35          #define K11 ( decode[2]==0x0d ) //200+
  36          #define K12 ( decode[2]==0x07 ) //-
  37          #define K13 ( decode[2]==0x15) // +
  38          #define K14 ( decode[2]==0x09 ) // EQ
  39          #define K15 ( decode[2]==0x44 ) // <<
  40          #define K16 ( decode[2]==0x40 ) //>>
  41          #define K17 ( decode[2]==0x43 ) // >||
  42          #define K18 ( decode[2]==0x45 ) // CH-
  43          #define K19 ( decode[2]==0x46 ) // CH
  44          #define K20 ( decode[2]==0x47 ) // CH+
  45          //**************************************************************************************************
  46          //延时函数
  47          //**************************************************************************************************
  48          delay(uint time)         //int型数据为16位,所以最大值为65535            
  49           {
  50   1        uint  i,j;             //定义变量i,j,用于循环语句 
  51   1        for(i=0;i<time;i++)    //for循环,循环50*time次
  52   1           for(j=0;j<100;j++); //for循环,循环50次
  53   1       }
  54          //**************************************************************************************************
  55          //定时中断0处理函数
C51 COMPILER V7.06   MAIN                                                                  10/12/2014 15:50:55 PAGE 2   

  56          //**************************************************************************************************
  57          void IRQ_timer0(void) interrupt 1 using 1
  58          {
  59   1        IRQ_num++;   //计数1个周期时间，即2个下降沿之间的时间
  60   1      }
  61          
  62          //**************************************************************************************************
  63          //外部中断0处理函数
  64          //**************************************************************************************************
  65          void IRQ_EX0(void) interrupt 0 
  66          {
  67   1        static uchar  i;         //接收红外信号处理
  68   1        static bit flag;         //第二次进入中断时，完成第1个周期计时
  69   1      if(flag)                         
  70   1         {
  71   2          if(IRQ_num<63&&IRQ_num>=33)//按下一次按键，先来一个13.5ms(9ms+4.5ms)引导码
  72   2                              i=0;   //数组重新开始存储接下来的32位数的周期长度
  73   2                      T_num[i]=IRQ_num;  //存储每个每个周期的持续时间，用来判断高低电平
  74   2                      IRQ_num=0;         //定时中断次数置0，以便开始计数下一个周期的持续时间
  75   2                      i++;               //i加1
  76   2                               if(i==33)
  77   2                              {
  78   3                                       IRF_ok=1;     //解码1次完成，置标志位
  79   3                                       i=0;          //数组重新开始存储接下来的32位数的周期长度
  80   3                                      }
  81   2                }
  82   1               else
  83   1                      {
  84   2                      IRQ_num=0;             //定时中断次数置0   
  85   2                      flag=1;                //第一次进入中断,置标志位
  86   2                      }
  87   1      }
  88          //**************************************************************************************************
  89          //定时0初始化
  90          //**************************************************************************************************
  91          void timer0_init(void)//定时器0初始化
  92          {
  93   1      
  94   1        TMOD=0x02; //定时器0工作方式2，自动装入时间常数的8位定时器/计数器
  95   1        TH0=0x00; 
  96   1        TL0=0x00;  //置初值,(256-0)x12/12000000=0.256ms
  97   1        ET0=1;     //开定时器0中断
  98   1        TR0=1;     //启动定时器0
  99   1      }
 100          //**************************************************************************************************
 101          //外部中断0初始化
 102          //**************************************************************************************************
 103          void EX0init(void)
 104          {
 105   1       IT0 = 1;   //指定外部中断0下降沿触发，INT0 (P3.2)
 106   1       EX0 = 1;   //使能外部中断
 107   1       EA = 1;    //开总中断
 108   1      }
 109          //**************************************************************************************************
 110          //32位二进制得4字节数据
 111          //**************************************************************************************************
 112          void bit_byte(void) 
 113          { 
 114   1        uchar i, j, k=1;
 115   1        uchar temp,value;
 116   1        for(i=0;i<4;i++)        //循环4次得4字节
 117   1           {
C51 COMPILER V7.06   MAIN                                                                  10/12/2014 15:50:55 PAGE 3   

 118   2            for(j=1;j<=8;j++)   //循环取8位得1字节
 119   2               {
 120   3                value>>=1;      //左移1位,依次从低位到高位
 121   3                temp=T_num[k];  //由于第1个数据为引导码，舍去，所以从第2开即是提取后面的32位
 122   3                if(temp>7)      //大于7*0.256=1.8ms为1,周期1.125ms表示"0"；周期2.25ms表示"1"
 123   3                value|=0x80; //为1则最高位赋1
 124   3                k++;            //k加1，准备提取下1位
 125   3               }
 126   2           decode[i]=value;     //获取到1字节
 127   2           value=0;             //清0，准备提取下1字节        
 128   2           } 
 129   1      }
 130          //**************************************************************************************************
 131          //码值处理函数
 132          //**************************************************************************************************
 133          void code_pro(void)
 134          {
 135   1             //处理16位用户码
 136   1             dis2[0] = Tab[decode[0]/16];   //取用户码第1字节的高4位
 137   1                 dis2[1] = Tab[decode[0]%16];   //取用户码第1字节的低4位
 138   1                 dis2[2] = Tab[decode[1]/16];   //取用户码第2字节的高4位
 139   1                 dis2[3] = Tab[decode[1]%16];   //取用户码第2字节的低4位
 140   1      
 141   1                 dis2[4] = '-';                 //符号
 142   1                 dis2[5] = '(';                 //符号
 143   1                 dis2[6] = Tab[decode[2]/16];   //处理数据码的高4位
 144   1                 dis2[7] = Tab[decode[2]%16];   //处理数据码的低4位
 145   1                 dis2[8] = '/';                 //符号
 146   1                 dis2[9] = Tab[decode[3]/16];   //处理数据反码的高4位,用于核对数据是否接收准确
 147   1                 dis2[10] = Tab[decode[3]%16];  //处理数据反码的低4位
 148   1                 dis2[11] =')';                 //符号
 149   1      }
 150          unsigned int GetKeyValue()
 151          {               //unsigned int i;
 152   1              //      i=adaverage[7];
 153   1                 // bit_byte() ;
 154   1              if K1 return 1;
 155   1              if K2 return 2;
 156   1              if K3 return 3;
 157   1              if K4 return 4;
 158   1              if K5 return 5;
 159   1              if K6 return 6;
 160   1              if K7 return 7;
 161   1              if K8 return 8;
 162   1              if K9 return 9;
 163   1              if K10 return 10;
 164   1              if K11 return 11;
 165   1              if K12 return 12;
 166   1              if K13 return 13;
 167   1              if K14 return 14;
 168   1              if K15 return 15;
 169   1              if K16 return 16;
 170   1              if K17 return 17;
 171   1              if K18 return 18;
 172   1              if K19 return 19;
 173   1              if K20 return 20;
 174   1              return 0;
 175   1      }
 176          void Adjust (void)
 177          {
 178   1       unsigned int i;
 179   1              i=       GetKeyValue();
C51 COMPILER V7.06   MAIN                                                                  10/12/2014 15:50:55 PAGE 4   

 180   1      
 181   1              switch (i)
 182   1              {
 183   2                 case (0):    wcode(0xc4); wdata(Tab[0]);                                break;
 184   2                 case (1):    wcode(0xc4); wdata(Tab[1]);                                break;
 185   2                 case (2):    wcode(0xc4); wdata(Tab[2]);                                break;
 186   2                 case (3):    wcode(0xc4); wdata(Tab[3]);                                break;
 187   2                 case (4):    wcode(0xc4); wdata(Tab[4]);                                break;
 188   2                 case (5):    wcode(0xc4); wdata(Tab[5]);                                break;
 189   2                 case (6):    wcode(0xc4); wdata(Tab[6]);                                break;
 190   2                 case (7):    wcode(0xc4); wdata(Tab[7]);                                break;
 191   2                 case (8):    wcode(0xc4); wdata(Tab[8]);                                break;
 192   2                 case (9):    wcode(0xc4); wdata(Tab[9]);                                break;
 193   2                 case (10):   wcode(0xc4); wdata(Tab[2]);                                break;
 194   2                 case (11):                                      break;
 195   2                 case (12):   wcode(0xc4); wdata(Tab[11]);                               break;
 196   2                 case (13):   wcode(0xc4); wdata(Tab[10]);                               break;
 197   2                 case (14):                                      break;
 198   2                 case (15):   wcode(0xc4); wdata(Tab[12]);                               break;
 199   2                 case (16):   wcode(0xc4); wdata(Tab[13]);                               break;
 200   2                 case (17):   wcode(0xc4); wdata(Tab[14]);                               break;
 201   2                 case (18):                                      break;
 202   2                 case (19):                                      break;
 203   2                 case (20):                                      break;
 204   2      
 205   2              }
 206   1               
 207   1      }         
 208          //**************************************************************************************************
 209          //主函数
 210          //**************************************************************************************************
 211          void main(void)
 212          {
 213   1       EX0init();            //初始化外部中断0
 214   1       timer0_init();        //初始化定时器0
 215   1       InitLCD();            //初始化液晶
 216   1      
 217   1       while(1)              //死循环
 218   1         {
 219   2          if(IRF_ok)         //接收完1次后处理
 220   2                {   
 221   3                 bit_byte();     //提取到32位数据
 222   3             //code_pro();     //码值处理
 223   3                       Adjust () ;
 224   3             //show();         //显示码值
 225   3                 IRF_ok=0;       //清标志位
 226   3                }       
 227   2         }
 228   1      }
 229            


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    699    ----
   CONSTANT SIZE    =     21    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     55    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
